'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { createClient } from '@/lib/supabase/client';

const AuthContext = createContext({});

/**
 * AuthProvider simplificado - Solo maneja ESTADO, no lógica de autenticación
 * La autenticación se maneja en API routes server-side
 */
export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const supabase = createClient();

  // Cargar sesión inicial desde el servidor
  useEffect(() => {
    let isMounted = true;

    const loadSession = async () => {
      try {
        // Fetch session desde API route (server-verified)
        const response = await fetch('/api/auth/session', {
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-cache',
          },
        });

        if (!isMounted) return;

        // Verificar si la respuesta es OK antes de parsear
        if (!response.ok) {
          console.error('Error en API session:', response.status, response.statusText);
          setUser(null);
          setUserProfile(null);
          setLoading(false);
          return;
        }

        // Verificar que la respuesta es JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          console.error('Respuesta no es JSON:', contentType);
          const text = await response.text();
          console.error('Contenido:', text.substring(0, 200));
          setUser(null);
          setUserProfile(null);
          setLoading(false);
          return;
        }

        const data = await response.json();

        if (data.authenticated && data.user) {
          setUser({
            id: data.user.id,
            email: data.user.email,
          });
          setUserProfile(data.user);
          console.log('✅ Sesión cargada:', data.user.rol);
        } else {
          setUser(null);
          setUserProfile(null);
          console.log('ℹ️ No hay sesión activa');
        }
      } catch (error) {
        console.error('Error cargando sesión:', error);
        if (isMounted) {
          setUser(null);
          setUserProfile(null);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    loadSession();

    // Escuchar cambios en tiempo real de Supabase Auth
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('🔔 Auth event:', event);

        if (!isMounted) return;

        // Si hay evento SIGNED_IN, recargar sesión desde servidor
        if (event === 'SIGNED_IN' && session?.user) {
          const response = await fetch('/api/auth/session', { cache: 'no-store' });
          const data = await response.json();

          if (data.authenticated) {
            setUser({ id: data.user.id, email: data.user.email });
            setUserProfile(data.user);
          }
        }

        // Si hay evento SIGNED_OUT, limpiar estado
        if (event === 'SIGNED_OUT') {
          setUser(null);
          setUserProfile(null);
        }

        setLoading(false);
      }
    );

    return () => {
      isMounted = false;
      subscription.unsubscribe();
    };
  }, []);

  /**
   * Logout - Solo llama al API route y redirige
   * La limpieza de sesión la hace el servidor
   */
  const signOut = async () => {
    try {
      console.log('🚪 Cerrando sesión...');

      // Limpiar estado local primero (UX inmediata)
      setUser(null);
      setUserProfile(null);

      // Llamar API de logout server-side
      await fetch('/api/auth/logout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      // Limpiar storage local
      if (typeof window !== 'undefined') {
        localStorage.clear();
        sessionStorage.clear();
      }

      // Redirigir con hard reload (limpia cache)
      if (typeof window !== 'undefined') {
        window.location.href = '/';
      }
    } catch (error) {
      console.error('Error en logout:', error);
      // En caso de error, forzar redirect de todas formas
      if (typeof window !== 'undefined') {
        window.location.href = '/';
      }
    }
  };

  /**
   * Refrescar perfil del usuario desde servidor
   */
  const refreshProfile = async () => {
    if (!user) return;

    try {
      const response = await fetch('/api/auth/session', { cache: 'no-store' });
      const data = await response.json();

      if (data.authenticated && data.user) {
        setUserProfile(data.user);
        console.log('✅ Perfil refrescado');
      }
    } catch (error) {
      console.error('Error refrescando perfil:', error);
    }
  };

  const value = {
    user,
    userProfile,
    loading,
    signOut,
    refreshProfile,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
};
