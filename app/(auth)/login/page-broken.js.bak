'use client';

import { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function LoginPage() {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [info, setInfo] = useState('');

  const searchParams = useSearchParams();

  // Mostrar mensajes basados en query params
  useEffect(() => {
    if (searchParams.get('session_expired') === 'true') {
      setInfo('Tu sesi√≥n expir√≥ por inactividad. Por favor inicia sesi√≥n nuevamente.');
    }
    if (searchParams.get('rejected') === 'true') {
      setError('Tu cuenta ha sido rechazada. Contacta a la secretar√≠a para m√°s informaci√≥n.');
    }
    if (searchParams.get('inactive') === 'true') {
      setError('Tu cuenta est√° inactiva. Contacta al administrador para reactivarla.');
    }
  }, [searchParams]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setError('');
    setInfo('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setInfo('');

    try {
      // Llamar al API route de login server-side
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
        }),
      });

      // Verificar si la respuesta es JSON
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.error('Respuesta no es JSON:', contentType);
        const text = await response.text();
        console.error('Error del servidor:', text.substring(0, 500));
        setError('Error del servidor. Por favor verifica la consola para m√°s detalles.');
        return;
      }

      const data = await response.json();

      if (response.ok && data.success) {
        console.log('‚úÖ Login exitoso');

        // Redirigir con hard reload a la URL espec√≠fica del rol
        if (typeof window !== 'undefined') {
          window.location.href = data.redirectUrl;
        }
      } else {
        // Manejar errores espec√≠ficos
        if (data.estado === 'pendiente_aprobacion') {
          window.location.href = '/pendiente-aprobacion';
        } else {
          setError(data.error || 'Error al iniciar sesi√≥n. Verifica tus credenciales.');
        }
      }
    } catch (err) {
      setError('Error de conexi√≥n. Por favor intenta nuevamente.');
      console.error('Error en login:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <div className="auth-card">
        <h2 className="auth-title">Iniciar Sesi√≥n</h2>
        <p className="auth-subtitle">Accede a tu cuenta de VecindApp</p>

        <form onSubmit={handleSubmit} className="auth-form">
          {error && (
            <div className="alert alert-danger" role="alert">
              {error}
            </div>
          )}

          {info && (
            <div className="alert alert-info" role="alert">
              {info}
            </div>
          )}

          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email *</label>
            <input
              type="email"
              className="form-control"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="tu@email.com"
              required
              disabled={loading}
            />
          </div>

          <div className="mb-3">
            <label htmlFor="password" className="form-label">Contrase√±a *</label>
            <div className="input-group">
              <input
                type={showPassword ? "text" : "password"}
                className="form-control"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                placeholder="Ingresa tu contrase√±a"
                required
                disabled={loading}
              />
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => setShowPassword(!showPassword)}
                disabled={loading}
              >
                {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
              </button>
            </div>
          </div>

          <div className="mb-3">
            <Link href="/recuperar-password" className="text-primary text-decoration-none">
              ¬øOlvidaste tu contrase√±a?
            </Link>
          </div>

          <button type="submit" className="btn btn-primary w-100 mb-3" disabled={loading}>
            {loading ? 'Iniciando sesi√≥n...' : 'Iniciar Sesi√≥n'}
          </button>
        </form>

        <div className="auth-divider">
          <span>o</span>
        </div>

        <div className="auth-redirect">
          <p>¬øNo tienes cuenta? <Link href="/register" className="text-decoration-none">Reg√≠strate aqu√≠</Link></p>
        </div>

        <div className="auth-back">
          <Link href="/" className="text-decoration-none">‚Üê Volver al inicio</Link>
        </div>
      </div>
    </div>
  );
}
